pipeline {
  agent any
    parameters{
        string(name: 'VERSION', description: 'Enter the APP VERSION')
    }  
environment{
        AWS_ACCOUNT_ID="445567091907"
        REGION="ap-south-1"
        REPO_URI="${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/devops"
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REGISTRY_CREDENTIALS = 'docker-cred'
    }
  stages {
    stage('Clone') {
        steps {
                // Explicitly clone the Git repository
                echo 'Cloning the GitHub repository...'
                git url: 'https://github.com/ramesh991/Retail-App_kubernetes.git', branch: 'master'
            }
    }

    stage('Docker build'){
            steps{
                script{                  
                        sh """
                         docker build -t devsecops-example:${VERSION} .
                        """
                }
            }
        }
    // stage('Trivy Image Scan') {
    //   steps {
    //       script {
    //              //def dockerImage = "your-docker-image:tag" // Replace with your Docker image

    //               // Run Trivy as a service to scan the image
    //               sh """
    //                  trivy image --scanners vuln devsecops-example:${VERSION}
    //               """
    //           }
    //       }
    // }    

    stage('Image push to ECR'){
            steps{
                script{
                    withAWS(credentials: 'aws-devops', region: "${REGION}") {
                        sh """
                            aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
                        docker tag devsecops-example:${VERSION} ${REPO_URI}:${VERSION}
                        docker push ${REPO_URI}:${VERSION}
                        """
                    }
                }
            }
        }
        
    stage('Image push to Docker Hub'){
            steps{
                script{
                        withCredentials([usernamePassword(credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    
                        sh """
                        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        docker tag devsecops-example:${VERSION}  rklathwal/devsecops-example:${VERSION}
                        docker push rklathwal/devsecops-example:${VERSION}
                        """
                    
                }
                }
            }    

    }
    stage('Run Docker Container') {
    steps {
        script {
            // Run the Docker Compose command
            sh """
            docker-compose up -d
            """
        }
    }
    post {
        success {
            echo "Docker container started successfully using Docker Compose."
        }
        failure {
            echo "Failed to start the Docker container."
        }
    }
}
}
}