pipeline {
    agent any

    parameters {
        string(name: 'VERSION', description: 'Enter the APP VERSION')
    }

    environment {
        AWS_ACCOUNT_ID = "124355663661"
        REGION = "ap-northeast-2"
        REPO_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/devops"
        DOCKER_IMAGE = "devsecops-example-app:${VERSION}"
        DOCKER_REGISTRY = 'docker.io'
        DOCKER_REGISTRY_CREDENTIALS = 'docker-cred'
    }

    stages {
        stage('Clone') {
            steps {
                echo 'üîÅ Cloning the GitHub repository...'
                git url: 'https://github.com/Msocial123/fss-Retail-App_kubernetes.git', branch: 'master'
            }
        }

        stage('Docker Build') {
            steps {
                echo "üê≥ Building Docker image ${DOCKER_IMAGE}..."
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage("OWASP Dependency Check") {
            steps {
                echo "üîç Running OWASP Dependency Check..."
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'dc'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage('Trivy Image Scan') {
            steps {
                echo "üîç Scanning Docker image with Trivy..."
                sh '''
                    trivy image --format table --severity HIGH,CRITICAL --no-progress ${DOCKER_IMAGE} > trivy-scan.txt || true

                    echo "========== Trivy Vulnerability Summary =========="
                    cat trivy-scan.txt

                    HIGH_COUNT=$(grep -c 'HIGH' trivy-scan.txt || true)
                    CRITICAL_COUNT=$(grep -c 'CRITICAL' trivy-scan.txt || true)

                    echo "üìã Found $HIGH_COUNT HIGH and $CRITICAL_COUNT Critical vulnerabilities."
                '''
                archiveArtifacts artifacts: 'trivy-scan.txt', onlyIfSuccessful: true
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    withAWS(credentials: 'aws-devops', region: "${REGION}") {
                        echo "üì¶ Pushing Docker image to AWS ECR..."
                        sh """
                            aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${REPO_URI}
                            docker tag ${DOCKER_IMAGE} ${REPO_URI}:${VERSION}
                            docker push ${REPO_URI}:${VERSION}
                        """
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}", passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    echo "üì§ Pushing Docker image to Docker Hub..."
                    sh """
                        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        docker tag ${DOCKER_IMAGE} muralisocial123/${DOCKER_IMAGE}
                        docker push muralisocial123/${DOCKER_IMAGE}
                    """
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                echo "üöÄ Starting containers using Docker Compose..."
                sh "docker-compose up -d"
            }
            post {
                success {
                    echo "‚úÖ Docker containers started successfully."
                }
                failure {
                    echo "‚ùå Failed to start Docker containers."
                }
            }
        }
/*
		stage('ZAP Scan') {
			steps {
				echo "üõ°Ô∏è Running ZAP Scan on remote host..."
				sshagent(['zap']) {
					sh '''
						ssh -o StrictHostKeyChecking=no ubuntu@43.201.9.62 '
							sudo docker run --rm -t muralisocial123/cart-page-example:1.0 -t http://43.201.9.62:3001/ -r zap-report.html
						'
					'''
				}
			}
		}

        stage('Fetch ZAP Report') {
            steps {
                sshagent(['zap']) {
                    sh 'scp -o StrictHostKeyChecking=no ubuntu@43.201.9.62:~/zap-report.html .'
                }
                archiveArtifacts artifacts: 'zap-report.html', onlyIfSuccessful: true
            }
        }

*/
		stage('ZAP DAST Scan') {
			steps {
				echo "üîç Starting ZAP scan..."
				sh '''
					mkdir -p zap-output
					docker run --rm \
					-v $PWD/zap-output:/zap/wrk \
					-t zaproxy/zap-stable \
					zap-baseline.py \
					-t http://43.201.9.62:8090/ \
					-r zap-report.html \
					-J zap-report.json || true
				'''
			archiveArtifacts artifacts: 'zap-output/zap-report.*', allowEmptyArchive: true
			}
		}

		
        stage('Cleanup') {
            steps {
                echo "üßπ Cleaning up Docker resources..."
                sh "docker system prune -af"
            }
        }
    }
	


    post {
        always {
            echo "üßº Final cleanup..."
            cleanWs()
        }
    }
}

