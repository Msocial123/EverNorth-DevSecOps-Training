pipeline {
    agent any

    environment {
        // Set environment variables for SonarQube connection
        SONARQUBE_SERVER = 'SonarQube-Server'
        SONAR_TOKEN = credentials('Sonar-Token')  // Assuming you have stored the token in Jenkins credentials
        // Specify the full path to SonarScanner manually
        #SONAR_SCANNER_PATH = '/opt/sonar-scanner/bin/sonar-scanner'  // Replace with the actual path to SonarScanner on your machine
        // Define Sonar project properties
        SONAR_PROJECT_KEY = 'maven-web-application'  // Replace with your own unique project key
        SONAR_PROJECT_NAME = 'Maven-Web-Application'  // Replace with your project name
        SONAR_PROJECT_VERSION = '1.0.0'  // You can change this to match your version
    }

    stages {
        stage('Checkout Code') {
            
        }
        
        stage('Code Quality Analysis') {
            steps {
                script {
                    // Run SonarQube analysis with additional properties
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh """steps {
                // Explicitly clone the Git repository
                echo 'Cloning the GitHub repository...'
                git url: 'https://github.com/Msocial123/maven-web-application.git', branch: 'master'
            }
                            ${SONAR_SCANNER_PATH} \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.projectName=${SONAR_PROJECT_NAME} \
                            -Dsonar.projectVersion=${SONAR_PROJECT_VERSION} \
                            -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                script {
                    // Wait for SonarQube quality gate status
                    def qualityGate = waitForQualityGate()
                    if (qualityGate.status != 'OK') {
                        error "SonarQube Quality Gate failed! Code quality is not satisfactory."
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up or notify users after the build completes
            echo "Build complete."
        }
    }
}




 






